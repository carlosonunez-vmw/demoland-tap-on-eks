apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: perform-raise-issm-review
spec:
  description: |-
    Commits scan artifacts and logs collected during a RAISE Supply Chain invocation
    into a Git repository for further review.
  params:
  - name: metadata_store_url
  - name: metadata_store_ca_cert_secret
  - name: issm_review_github_secret_name
  - name: image_url
  - name: review_branch_name
  - name: trunk_branch
  - name: workload_name
  results:
  - name: provided_image_url
  workspaces:
    - name: default
      mountPath: /workspace
  volumes:
    - name: metadata-store-ca
      secret:
        secretName: $(params.metadata_store_ca_cert_secret)
  steps:
  - image: bash:5
    name: test-metadata-store-connection
    volumeMounts:
      - name: metadata-store-ca
        mountPath: /mds-ca
    script: |
      #!/usr/bin/env bash
      apk add curl
      set -euo pipefail
      result=$(curl -o /tmp/results.txt \
        --cacert /mds-ca/ca.crt \
        --cert /mds-ca/tls.crt \
        --key /mds-ca/tls.key \
        -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        -w '%{http_code}' \
        -sS \
        $(params.metadata_store_url)/api/sources?repo=doesnt-exist)
      test "$result" -eq 200 && exit 0
      >&2 echo "[$result] Failed to connect to Metadata Store at $(params.metadata_store_url): $(cat /tmp/results.txt)"
  - image: bash:5
    name: test-kubernetes-api-connection
    volumeMounts:
      - name: metadata-store-ca
        mountPath: /mds-ca
    script: |
      #!/usr/bin/env bash
      set -euo pipefail
      apk add curl
      result=$(curl -o /tmp/results.txt \
        --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        -w '%{http_code}' \
        -sS \
        https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/apis)
      test "$result" -eq 200 && exit 0
      >&2 echo "[$result] Failed to connect to the Kubernetes API: $(cat /tmp/results.txt)"
  - image: bitnami/git:2.44.0
    name: clone-review-repository
    env:
      - name: PROJECT_NAME
        valueFrom:
          secretKeyRef:
            name: $(params.issm_review_github_secret_name)
            key: review_github_project
      - name: GITHUB_USERNAME
        valueFrom:
          secretKeyRef:
            name: $(params.issm_review_github_secret_name)
            key: review_repo_username
      - name: GITHUB_TOKEN
        valueFrom:
          secretKeyRef:
            name: $(params.issm_review_github_secret_name)
            key: review_repo_token
    script: |
      #!/usr/bin/env bash
      set -euo pipefail
      git clone "https://$GITHUB_USERNAME:$GITHUB_TOKEN@github.com/$PROJECT_NAME" /workspace/repo
      git -C /workspace/repo remote set-url \
        origin \
        "https://$GITHUB_USERNAME:$GITHUB_TOKEN@github.com/$PROJECT_NAME"
      mkdir -p /workspace/repo/$(params.workload_name)
  - image: bitnami/git:2.44.0
    name: create-review-branch
    script: |
      #!/usr/bin/env bash
      set -euo pipefail
      if git -C /workspace/repo branch --all | grep -q "$(params.review_branch_name)"
      then
        >&2 echo "INFO: Branch already created; skipping: $(params.review_branch_name)"
        git -C /workspace/repo checkout "$(params.review_branch_name)"
          exit 0
      fi
      git -C /workspace/repo checkout -b "$(params.review_branch_name)"
      git -C /workspace/repo push -u origin "$(params.review_branch_name)"
  - image: bash:5
    name: add-source-scans
    volumeMounts:
      - name: metadata-store-ca
        mountPath: /mds-ca
    script: |
      #!/usr/bin/env bash
      set -euo pipefail
      apk add curl jq git
      scan=$(curl --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        -sS \
        https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/apis/scanning.apps.tanzu.vmware.com/v1beta1/namespaces/apps/sourcescans/$(params.workload_name) |
        jq -r .status.metadataURL) 
      if test -z "$scan"
      then
        >&2 echo "ERROR: No source scans found for workload $(params.workload_name)"
        exit 1
      fi
      >&2 echo "INFO: [$(params.workload_name)] Retrieving source scan: $scan"
      sbom=$(curl --cacert /mds-ca/ca.crt \
        --cert /mds-ca/tls.crt \
        --key /mds-ca/tls.key \
        -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        -sS \
        "$scan" | jq .)
      if test -z "$sbom"
      then
        >&2 echo "ERROR: SBOM data not found from source scan for workload $(params.workload_name)."
        exit 1
      fi
      echo "$sbom" > /workspace/repo/$(params.workload_name)/sbom_source_code.json
  - image: bash:5
    name: add-image-scans
    volumeMounts:
      - name: metadata-store-ca
        mountPath: /mds-ca
    script: |
      #!/usr/bin/env bash
      set -euo pipefail
      apk add curl jq git
      scan=$(curl --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        -sS \
        https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/apis/scanning.apps.tanzu.vmware.com/v1beta1/namespaces/apps/imagescans/$(params.workload_name) |
        jq -r .status.metadataURL) 
      if test -z "$scan"
      then
        >&2 echo "ERROR: No image scans found for workload $(params.workload_name)"
        exit 1
      fi
      >&2 echo "INFO: [$(params.workload_name)] Retrieving image scan: $scan"
      sbom=$(curl --cacert /mds-ca/ca.crt \
        --cert /mds-ca/tls.crt \
        --key /mds-ca/tls.key \
        -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        -sS \
        "$scan" | jq .)
      if test -z "$sbom"
      then
        >&2 echo "ERROR: SBOM data not found from image scan for workload $(params.workload_name)."
        exit 1
      fi
      echo "$sbom" > /workspace/repo/$(params.workload_name)/sbom_image_spdx.json
  - image: bitnami/git:2.44.0
    name: commit-and-push-scans
    env:
      - name: GIT_COMMITTER_NAME
        valueFrom:
          secretKeyRef:
            name: $(params.issm_review_github_secret_name)
            key: git_author
      - name: GIT_COMMITTER_EMAIL
        valueFrom:
          secretKeyRef:
            name: $(params.issm_review_github_secret_name)
            key: git_email
      - name: GIT_AUTHOR_NAME
        valueFrom:
          secretKeyRef:
            name: $(params.issm_review_github_secret_name)
            key: git_author
      - name: GIT_AUTHOR_EMAIL
        valueFrom:
          secretKeyRef:
            name: $(params.issm_review_github_secret_name)
            key: git_email
    script: |
      git -C /workspace/repo add /workspace/repo/$(params.workload_name)/*.json
      if git -C /workspace/repo diff-index --quiet HEAD
      then
        >&2 echo "INFO: Nothing has changed. Skipping."
        exit 0
      fi 
      git -C /workspace/repo commit -m "[$(params.workload_name)] Source code and image SBOMs added"
      git -C /workspace/repo push
  - image: bash:5
    name: create-pull-request-if-needed
    env:
      - name: PROJECT_NAME
        valueFrom:
          secretKeyRef:
            name: $(params.issm_review_github_secret_name)
            key: review_github_project
      - name: GITHUB_USERNAME
        valueFrom:
          secretKeyRef:
            name: $(params.issm_review_github_secret_name)
            key: review_repo_username
      - name: GITHUB_TOKEN
        valueFrom:
          secretKeyRef:
            name: $(params.issm_review_github_secret_name)
            key: review_repo_token
    script: |
      #!/usr/bin/env bash
      set -euo pipefail
      apk add curl jq git
      if git -C /workspace/repo diff-index --quiet HEAD
      then
        >&2 echo "INFO: Nothing has changed. Skipping."
        exit 0
      fi 
      title="SBOM Review: $(params.review_branch_name)"
      existing_prs=$(curl -sS -L \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $GITHUB_TOKEN" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/$PROJECT_NAME/pulls)
      if jq -r '.[].title' <<< "$existing_prs" | grep -q "$title"
      then
        >&2 echo "INFO: Pull request already created; commits henceforth can be found in this one: $title"
        exit 0
      fi
      data="$(printf '{"title":"%s","body":"%s","head":"%s","base":"%s"}' \
        "$title" \
        "Please review these changes." \
        "$(params.review_branch_name)" \
        "$(params.trunk_branch)")"
      curl -sS -L \
        -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $GITHUB_TOKEN" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/$PROJECT_NAME/pulls \
        -d "$data" || exit 1
  - image: bash:5
    name: wait-for-pr-merge
    env:
      - name: PROJECT_NAME
        valueFrom:
          secretKeyRef:
            name: $(params.issm_review_github_secret_name)
            key: review_github_project
      - name: GITHUB_USERNAME
        valueFrom:
          secretKeyRef:
            name: $(params.issm_review_github_secret_name)
            key: review_repo_username
      - name: GITHUB_TOKEN
        valueFrom:
          secretKeyRef:
            name: $(params.issm_review_github_secret_name)
            key: review_repo_token
    script: |
      #!/usr/bin/env bash
      set -euo pipefail
      apk add curl jq
      title="SBOM Review: $(params.review_branch_name)"
      iterations=0
      existing_pr_url=""
      while true
      do
        pr=""
        if test -n "$existing_pr_url"
        then
          pr=$(curl -sS -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "$existing_pr_url" | jq -r '.')
        else
          pr_json=$(curl -sS -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/$PROJECT_NAME/pulls")
          if test -z "$pr"
          then
            >&2 echo "INFO: There are no open pull requests at the moment."
            exit 0
          fi
          pr=$(echo "$pr_json" | jq --arg title "$title" -r '.[] | select(.title == $title)')
        fi
        if test -z "$pr" || test "$pr" == 'null'
        then
          >&2 echo "ERROR: This PR was never created: $title";
          exit 1
        fi
        existing_pr_url=$(jq -r .url <<< "$pr")
        id=$(jq -r '.id' <<< "$pr")
        pr_state=$(jq -r '.state' <<< "$pr")
        merged_at=$(jq -r '.merged_at' <<< "$pr")
        case "$pr_state" in
          closed)
            case "$merged_at" in
              null)
                >&2 echo "ERROR: Pull request was not accepted. Sorry :("
                exit 1
                ;;
              *)
                >&2 echo "INFO: Pull request was merged into $(params.trunk_branch) at: $merged_at"
                exit 0
                ;;
            esac
            ;;
          open)
            iterations=$((iterations+1)) 
            >&2 echo "INFO: [$(date +%c)] Waiting for pull request to close: $existing_pr_url"
            sleep 1m
            ;;
          *)
            >&2 echo "ERROR: Invalid pull request state: $state"
            exit 1
            ;;
        esac
      done
  - image: bitnami/git:2.44.0
    name: delete-review-branch
    script: |
      #!/usr/bin/env bash
      set -euo pipefail
      git -C /workspace/repo remote update origin --prune
      if git -C /workspace/repo branch --remote | grep -q $(params.review_branch_name)
      then
        git -C /workspace/repo checkout main
        git -C /workspace/repo push --delete origin $(params.review_branch_name) || continue
      else >&2 echo "INFO: Branch already deleted: $(params.review_branch_name)"
      fi
  - image: bash:5
    name: write-approved-image-url
    script: |
      echo "$image_url" > "$(results.provided_image_url.path)"
